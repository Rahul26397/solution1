public class Stack {
    private int maxSize;         // Maximum size of the stack
    private int top;             // Index of the top element
    private int[] stackArray;    // Array to store stack elements

    // Constructor
    public Stack(int size) {
        maxSize = size;
        stackArray = new int[maxSize];
        top = -1;                // Initialize top as -1 to represent an empty stack
    }

    // Method to push an element onto the stack
    public void push(int value) {
        if (top == maxSize - 1) {
            System.out.println("Stack overflow, unable to push element " + value);
        } else {
            top++;
            stackArray[top] = value;
            System.out.println("Pushed element " + value + " onto the stack.");
        }
    }

    // Method to pop an element from the stack
    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack underflow, unable to pop element.");
            return -1;   // Return a sentinel value to indicate underflow
        } else {
            int poppedElement = stackArray[top];
            top--;
            System.out.println("Popped element " + poppedElement + " from the stack.");
            return poppedElement;
        }
    }

    // Method to check if the stack is empty
    public boolean isEmpty() {
        return (top == -1);
    }

    // Main method to test the stack implementation
    public static void main(String[] args) {
        Stack stack = new Stack(5);
        System.out.println("Is stack empty? " + stack.isEmpty());

        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.push(40);
        stack.push(50);
        stack.push(60);  // Trying to push element when stack is already full

        System.out.println("Is stack empty? " + stack.isEmpty());

        stack.pop();
        stack.pop();
        stack.pop();
        stack.pop();
        stack.pop();
        stack.pop();   // Trying to pop element when stack is already empty
    }
}
