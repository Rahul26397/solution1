public class Queue {
    private Node front;   // Front of the queue
    private Node rear;    // Rear of the queue

    // Node class representing individual nodes of the linked list
    private class Node {
        int data;
        Node next;

        Node(int value) {
            data = value;
            next = null;
        }
    }

    // Constructor
    public Queue() {
        front = null;
        rear = null;
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return (front == null);
    }

    // Method to enqueue (add) an element to the queue
    public void enqueue(int value) {
        Node newNode = new Node(value);

        if (isEmpty()) {
            front = newNode;
            rear = newNode;
        } else {
            rear.next = newNode;
            rear = newNode;
        }

        System.out.println("Enqueued element " + value + " to the queue.");
    }

    // Method to dequeue (remove) an element from the queue
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue underflow, unable to dequeue element.");
            return -1;   // Return a sentinel value to indicate underflow
        } else {
            int dequeuedElement = front.data;
            front = front.next;

            if (front == null) {
                rear = null;  // If the queue becomes empty after dequeueing, update rear as well
            }

            System.out.println("Dequeued element " + dequeuedElement + " from the queue.");
            return dequeuedElement;
        }
    }

    // Main method to test the queue implementation
    public static void main(String[] args) {
        Queue queue = new Queue();
        System.out.println("Is queue empty? " + queue.isEmpty());

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.enqueue(40);
        queue.enqueue(50);
        queue.enqueue(60);

        System.out.println("Is queue empty? " + queue.isEmpty());

        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();   // Trying to dequeue element when queue is already empty
    }
}
